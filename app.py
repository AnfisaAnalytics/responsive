import streamlit as st
import plotly.express as px
import psycopg2
import pandas as pd

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –∏ —Ç–µ–º—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ CSS —Å—Ç–∏–ª–∏
st.markdown("""
    <style>
    .main {
        padding: 2rem;
    }
    .stMetric {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .stMetric:hover {
        transform: translateY(-2px);
        transition: all 0.3s ease;
    }
    .st-emotion-cache-1629p8f h1 {
        color: #1f77b4;
        text-align: center;
        padding-bottom: 1rem;
        border-bottom: 2px solid #1f77b4;
        margin-bottom: 2rem;
    }
    .st-emotion-cache-10trblm {
        color: #2c3e50;
        margin-top: 2rem;
    }
    div[data-testid="stDataFrame"] {
        background-color: white;
        padding: 1rem;
        border-radius: 0.5rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    </style>
""", unsafe_allow_html=True)

def connect_to_db():
    try:
        conn = psycopg2.connect(
        host="rc1a-p8bp15mmxsfwpbt0.mdb.yandexcloud.net",
        port="6432",
        database="db1",
        user="test_user",
        password="j2M{CnnFq@"
        )
        return conn
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def get_response_times():
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞"""
    query = """
    WITH ranked_messages AS (
    SELECT
    m.message_id,
    m.type,
    m.entity_id,
    m.created_by,
    m.created_at,
    mg.name_mop,
    LAG(m.type) OVER (PARTITION BY m.entity_id ORDER BY m.created_at) as prev_type,
    LAG(m.created_at) OVER (PARTITION BY m.entity_id ORDER BY m.created_at) as prev_created_at
    FROM test.chat_messages m
    LEFT JOIN test.managers mg ON m.created_by = mg.mop_id
    ORDER BY m.entity_id, m.created_at
    ),
    response_times AS (
    SELECT
    rm.,
    CASE
    WHEN rm.type = 'outgoing_chat_message'
    AND rm.prev_type = 'incoming_chat_message' THEN
    CASE
    -- –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –≤ –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (00:00-09:30)
    WHEN TO_TIMESTAMP(rm.prev_created_at)::time < TIME '09:30:00'
    AND TO_TIMESTAMP(rm.created_at)::time >= TIME '09:30:00' THEN
    EXTRACT(EPOCH FROM (
    TO_TIMESTAMP(rm.created_at) -
    TO_TIMESTAMP(rm.prev_created_at)::date + INTERVAL '9 hours 30 minutes'
    ))
    -- –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    WHEN TO_TIMESTAMP(rm.created_at)::time > TIME '00:00:00' THEN
    EXTRACT(EPOCH FROM (
    TO_TIMESTAMP(rm.created_at) -
    TO_TIMESTAMP(rm.prev_created_at)
    ))
    ELSE NULL
    END
    ELSE NULL
    END as response_time_seconds
    FROM ranked_messages rm
    )
    SELECT
    name_mop,
    COUNT() as total_responses,
    ROUND(AVG(response_time_seconds)/60, 2) as avg_response_time_minutes,
    ROUND(MIN(response_time_seconds)/60, 2) as min_response_time_minutes,
    ROUND(MAX(response_time_seconds)/60, 2) as max_response_time_minutes
    FROM response_times
    WHERE response_time_seconds IS NOT NULL
    AND name_mop IS NOT NULL
    GROUP BY name_mop
    ORDER BY avg_response_time_minutes;
    """

try:
    conn = connect_to_db()
    if conn:
        df = pd.read_sql_query(query, conn)
        conn.close()
        return df
    return None
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
    return None

st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤", layout="wide")

st.title("–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏")

# –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
st.markdown("""
    <div style='background-color: #e8f4f9; padding: 1rem; border-radius: 0.5rem; margin-bottom: 2rem;'>
        <h4 style='color: #1f77b4;'>–û –¥–∞—à–±–æ—Ä–¥–µ</h4>
        <p>–≠—Ç–æ—Ç –¥–∞—à–±–æ—Ä–¥ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏, 
        –≤–∫–ª—é—á–∞—è –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.</p>
    </div>
""", unsafe_allow_html=True)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
df = get_response_times()

if df is not None:
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º
    st.markdown("<h3 style='text-align: center; color: #2c3e50;'>–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏</h3>", unsafe_allow_html=True)
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("üë• –í—Å–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤", len(df))
    with col2:
        st.metric("‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (–º–∏–Ω)", f"{df['avg_response_time_minutes'].mean():.2f}")
    with col3:
        st.metric("üìù –í—Å–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–π", f"{df['total_responses'].sum():,}")

    # –ì—Ä–∞—Ñ–∏–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º
    st.markdown("<h3 style='text-align: center; color: #2c3e50; margin-top: 2rem;'>–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö</h3>", 
                unsafe_allow_html=True)
    
    # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
    fig1 = px.bar(
        df,
        x='name_mop',
        y='avg_response_time_minutes',
        title='–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º',
        labels={
            'name_mop': '–ú–µ–Ω–µ–¥–∂–µ—Ä', 
            'avg_response_time_minutes': '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (–º–∏–Ω—É—Ç—ã)'
        },
        color='avg_response_time_minutes',
        color_continuous_scale='RdYlBu_r'
    )
    fig1.update_layout(
        plot_bgcolor='white',
        xaxis_tickangle=-45,
        hoverlabel=dict(bgcolor="white"),
        margin=dict(t=50, l=0, r=0, b=0)
    )
    st.plotly_chart(fig1, use_container_width=True)

    # –ì—Ä–∞—Ñ–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤
    fig2 = px.bar(
        df,
        x='name_mop',
        y='total_responses',
        title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º',
        labels={
            'name_mop': '–ú–µ–Ω–µ–¥–∂–µ—Ä', 
            'total_responses': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏–π'
        },
        color='total_responses',
        color_continuous_scale='Viridis'
    )
    fig2.update_layout(
        plot_bgcolor='white',
        xaxis_tickangle=-45,
        hoverlabel=dict(bgcolor="white"),
        margin=dict(t=50, l=0, r=0, b=0)
    )
    st.plotly_chart(fig2, use_container_width=True)

    # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö
    st.markdown("<h3 style='text-align: center; color: #2c3e50;'>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º</h3>", 
                unsafe_allow_html=True)
    
    styled_df = df.rename(columns={
        'name_mop': '–ú–µ–Ω–µ–¥–∂–µ—Ä',
        'total_responses': '–í—Å–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–π',
        'avg_response_time_minutes': '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (–º–∏–Ω)',
        'min_response_time_minutes': '–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (–º–∏–Ω)',
        'max_response_time_minutes': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (–º–∏–Ω)'
    })
    
    st.dataframe(
        styled_df,
        hide_index=True,
        column_config={
            "–í—Å–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–π": st.column_config.NumberColumn(format="%d"),
            "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (–º–∏–Ω)": st.column_config.NumberColumn(format="%.2f"),
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (–º–∏–Ω)": st.column_config.NumberColumn(format="%.2f"),
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (–º–∏–Ω)": st.column_config.NumberColumn(format="%.2f")
        }
    )
else:
    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.")

