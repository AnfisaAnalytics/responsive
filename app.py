import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π",
    page_icon="",
    layout="wide"
)

st.markdown("""
<style>
    /* –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ */
    #dashboard-title {
        color: #1f1f1f;
        font-size: 28px;
        font-weight: 600;
        margin-bottom: 24px;
    }

    /* –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ */
    #time-filters-container {
        background: #ffffff;
        padding: 16px;
        border-radius: 8px;
        margin-bottom: 24px;
    }

    /* –ö–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ */
    .filter-button {
        background: #f5f5f5;
        border: none;
        border-radius: 4px;
        color: #333;
        font-size: 14px;
        padding: 8px 16px;
        transition: all 0.3s;
    }
    
    .filter-button:hover {
        background: #2E5BFF;
        color: white;
    }

    /* PDF –∫–Ω–æ–ø–∫–∞ */
    .pdf-button-container {
        margin-top: 16px;
    }

    /* –û—Å–Ω–æ–≤–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ */
    #main-metric-container {
        background: white;
        padding: 24px;
        border-radius: 12px;
        box-shadow: 0 8px 24px rgba(0,0,0,0.12);
        margin-bottom: 24px;
        position: relative;
        z-index: 2;
    }

    #wait-time-metric {
        font-size: 24px;
        font-weight: 600;
        color: #1f1f1f;
    }

    #wait-time-value {
        font-size: 36px;
        color: #2E5BFF;
    }

    #wait-time-chart {
        height: 200px;
    }

    /* –í—Ç–æ—Ä–∏—á–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ */
    #secondary-metrics-container {
        background: rgba(255,255,255,0.95);
        padding: 24px;
        border-radius: 12px;
        margin-top: -12px;
        position: relative;
        z-index: 1;
    }

    .metric-card {
        background: white;
        padding: 16px;
        border-radius: 8px;
        margin-bottom: 16px;
    }

    .metric-title {
        font-size: 14px;
        color: #666;
        margin-bottom: 8px;
    }

    .metric-value {
        font-size: 24px;
        color: #1f1f1f;
        font-weight: 600;
    }

    /* –ì—Ä–∞—Ñ–∏–∫–∏ */
    .chart-container {
        background: white;
        padding: 24px;
        border-radius: 8px;
        margin-bottom: 24px;
    }

    .chart-title {
        font-size: 18px;
        color: #1f1f1f;
        margin-bottom: 16px;
    }

    /* –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è Streamlit */
    .st-emotion-cache-18ni7ap {
        padding-top: 0;
    }

    .st-emotion-cache-60r24q {
        background: #fafafa;
    }

    /* –°–∫—Ä—ã—Ç–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */
    .st-emotion-cache-k7vsyb a {
        display: none;
    }
    .st-emotion-cache-3k8syi{
        background:#fff;
    }
    #main-metric-container{
        box-shadow:0 8px 24px rgba(0,0,0,0.0);
    }
    #root > div:nth-child(1) > div.withScreencast > div > div > header{
        z-index:-1;
    }
    #root > div:nth-child(1) > div.withScreencast > div > div > div > section > div.block-container.st-emotion-cache-z5fcl4.ea3mdgi5 > div > div > div > div:nth-child(5)>*{
        border: none;
        background:#ffffff00;
        color: #727272;
    }
    
    /* –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü —É –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ */
    .stButton button {
        border: none !important;
    }
</style>
""", unsafe_allow_html=True)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data():
    with open('data.json', 'r', encoding='utf-8') as file:
        data = json.load(file)
    df = pd.DataFrame(data['data'])
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –¥–∞—Ç –≤ datetime
    date_columns = ['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞', '–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞', '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞']
    for col in date_columns:
        df[col] = pd.to_datetime(df[col])
    
    return df

# –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
def filter_data(df, period):
    now = pd.Timestamp.now()
    if period == 'today':
        return df[df['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞'].dt.date == now.date()]
    elif period == 'week':
        return df[df['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞'] >= (now - pd.Timedelta(days=7))]
    elif period == 'month':
        return df[df['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞'] >= (now - pd.Timedelta(days=30))]
    elif period == 'year':
        return df[df['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞'] >= (now - pd.Timedelta(days=365))]
    return df

def main():
    left_col, right_col = st.columns([1, 2])
    
    with left_col:
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        st.markdown('''
            <h1 id="dashboard-title">–ü–∞–Ω–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</h1>
            <p class="dashboard-subtitle">–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</p>
        ''', unsafe_allow_html=True)
        
        # –§–∏–ª—å—Ç—Ä—ã –≤—Ä–µ–º–µ–Ω–∏
        st.markdown('<div id="time-filters-container">', unsafe_allow_html=True)
        cols = st.columns(4)  # –°–æ–∑–¥–∞–µ–º 4 –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        
        with cols[0]:
            if st.button('–°–µ–≥–æ–¥–Ω—è', key='today-filter', help='–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è'):
                st.session_state.period = 'today'
        with cols[1]:
            if st.button('–ù–µ–¥–µ–ª—è', key='week-filter', help='–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é'):
                st.session_state.period = 'week'
        with cols[2]:
            if st.button('–ú–µ—Å—è—Ü', key='month-filter', help='–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –º–µ—Å—è—Ü'):
                st.session_state.period = 'month'
        with cols[3]:
            if st.button('–ì–æ–¥', key='year-filter', help='–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –≥–æ–¥'):
                st.session_state.period = 'year'
        st.markdown('</div>', unsafe_allow_html=True)
        
        # –ö–Ω–æ–ø–∫–∞ PDF
        st.markdown('<div class="pdf-button-container">', unsafe_allow_html=True)
        if st.button('üì• –°–∫–∞—á–∞—Ç—å PDF –æ—Ç—á—ë—Ç', key='download-pdf'):
            pass
        st.markdown('</div>', unsafe_allow_html=True)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    try:
        df = load_data()
    except FileNotFoundError:
        st.error("–§–∞–π–ª data.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    if 'period' not in st.session_state:
        st.session_state.period = 'all'
    filtered_df = filter_data(df, st.session_state.period)
    
    # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
    wait_times = (filtered_df['–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞'] - filtered_df['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞']).dt.total_seconds() / 60
    avg_wait_time = wait_times.mean()
    
    
    with right_col:
        # –û—Å–Ω–æ–≤–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ –∏ –≥—Ä–∞—Ñ–∏–∫
        st.markdown('<div id="main-metric-container">', unsafe_allow_html=True)
        metric_cols = st.columns(2)  # –°–æ–∑–¥–∞–µ–º 2 –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏ –∏ –≥—Ä–∞—Ñ–∏–∫–∞
        
        with metric_cols[0]:
            st.markdown(f'''
                <div id="wait-time-metric">
                    <div class="metric-title">–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è</div>
                    <div id="wait-time-value">{avg_wait_time:.1f} –º–∏–Ω</div>
                </div>
            ''', unsafe_allow_html=True)
        
        with metric_cols[1]:
            daily_wait_times = filtered_df.groupby(filtered_df['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞'].dt.date).agg({
                '–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞': lambda x: (x - filtered_df.loc[x.index, '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞']).mean().total_seconds() / 60
            }).reset_index()
            
            fig_wait = px.line(daily_wait_times, 
                              x='–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞', 
                              y='–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞',
                              title='')
            fig_wait.update_traces(line_color='#2E5BFF')
            fig_wait.update_layout(
                showlegend=False,
                xaxis=dict(showgrid=False, zeroline=False),
                yaxis=dict(showgrid=False, zeroline=False),
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                margin=dict(l=20, r=20, t=20, b=20)
            )
            st.plotly_chart(fig_wait, use_container_width=True, key='wait-time-chart')
        st.markdown('</div>', unsafe_allow_html=True)

    # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ —Å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º 60/40 –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã –∏ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    heatmap_col, summary_col = st.columns([0.6, 0.4])
    
    with heatmap_col:
        st.markdown('''
            <div class="chart-container">
                <div class="chart-title">–û–±—ä–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ –∏ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏</div>
            </div>
        ''', unsafe_allow_html=True)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
        filtered_df['hour'] = filtered_df['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞'].dt.hour
        filtered_df['day_of_week'] = filtered_df['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞'].dt.day_name()
        
        heatmap_data = filtered_df.groupby(['day_of_week', 'hour']).size().unstack()
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        day_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
        heatmap_data = heatmap_data.reindex(day_order)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
        fig_heatmap = go.Figure(data=go.Heatmap(
            z=heatmap_data.values,
            x=heatmap_data.columns,
            y=heatmap_data.index,
            colorscale='Blues'
        ))
        
        fig_heatmap.update_layout(
            xaxis_title='–ß–∞—Å –¥–Ω—è',
            yaxis_title='–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏',
            margin=dict(l=20, r=20, t=20, b=20)
        )
        
        st.plotly_chart(fig_heatmap, use_container_width=True)
    
    with summary_col:
        st.markdown('''
            <div class="chart-container">
                <div class="chart-title">–°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</div>
            </div>
        ''', unsafe_allow_html=True)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        summary_data = {
            '–ú–µ—Ç—Ä–∏–∫–∞': [
                '% —Ç–∏–ø–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤',
                '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è',
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Å–º–µ–Ω—É',
                '–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏',
                '–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞'
            ],
            '–ó–Ω–∞—á–µ–Ω–∏–µ': [
                f"{(len(filtered_df[filtered_df['–¢–µ–º–∞ –∑–≤–æ–Ω–∫–∞'] == '–¢–∏–ø–æ–≤–æ–π']) / len(filtered_df) * 100):.1f}%",
                f"{avg_wait_time:.1f} –º–∏–Ω",
                "5",  # –ü—Ä–∏–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏—è
                "95%",  # –ü—Ä–∏–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏—è
                "‚ÇΩ250"  # –ü—Ä–∏–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏—è
            ]
        }
        
        summary_df = pd.DataFrame(summary_data)
        st.table(summary_df.set_index('–ú–µ—Ç—Ä–∏–∫–∞'))


if __name__ == "__main__":
    main()